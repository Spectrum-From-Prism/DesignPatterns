//实现一个导出数据的接口，让客户选择数据的导出方式
#include<string>
//实现导出数据的接口，导出数据的格式包含xml，json，文本格式txt，后面可能扩展exe
class IExport {
public:
	virtual bool Export(const std::string &data) = 0;
	virtual ~IExport() {}
};
class ExportXml :public IExport {
public:
	virtual bool Export(const std::string &data) {
		//...xml
		return true;
	}
};
class ExportJson :public IExport {
public:
	virtual bool Export(const std::string &data) {
		//...json
		return true;
	}
};
class ExportTxt :public IExport {
public:
	virtual bool Export(const std::string &data) {
		//...txt
		return true;
	}
};

//工厂类方法接口
class IExportFactory {
public:
	IExportFactory() {
		_export = nullptr;
	}
	virtual ~IExportFactory() {
		if (_export) {
			delete _export;
			_export = nullptr;
		}
	}
	bool Export(const std::string& data) {
		if (_export == nullptr) {
			_export = NewExport();
		}
		return _export->Export(data);
	}
protected:
	//让子类复写构建对象的过程
	virtual IExport* NewExport(/*...*/) = 0;
private:
	IExport* _export;
};
class ExportXmlFactory :public IExportFactory {
public:
	IExport* NewExport(/*...*/) {
		//可能有其他操作，或者许多参数
		IExport* temp = new ExportXml(/*...*/);
		//可能之后有什么操作(如需要中间类进行创建)
		return temp;
	}
};
class ExportJsonFactory :public IExportFactory {
public:
	IExport* NewExport(/*...*/) {
		//可能有其他操作，或者许多参数
		IExport* temp = new ExportJson;
		//可能之后有什么操作
		return temp;
	}
};
class ExportTxtFactory :public IExportFactory {
public:
	IExport* NewExport(/*...*/) {
		//可能有其他操作，或者许多参数
		IExport* temp = new ExportTxt;
		//可能之后有什么操作
		return temp;
	}
};
int main() {
	IExportFactory* factory = new ExportTxtFactory();
	factory->Export("hello world");
	return 0;
}